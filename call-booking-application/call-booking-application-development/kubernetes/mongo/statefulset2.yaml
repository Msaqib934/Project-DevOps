apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: mongo-db
  namespace: database
spec:
  selector:
    matchLabels:
      app: mongo-db
  serviceName: mongo-db-svc
  replicas: 1
  template:
    metadata:
      labels:
        app: mongo-db
    spec:
      serviceAccountName: database-service-account
      nodeSelector:
        module: database
      containers:
      - name: mongo-db
        image: mongo
        ports:
        - containerPort: 27017
          name: dbport
        env:
          - name: MONGO_INITDB_ROOT_USERNAME
            valueFrom:
              secretKeyRef:
                name: mongo-db-secrets-csi
                key: dbuser
          - name: MONGO_INITDB_ROOT_PASSWORD
            valueFrom:
              secretKeyRef:
                name: mongo-db-secrets-csi
                key: dbpass
        resources:
          requests:
            memory: "2Gi"
            cpu: "1000m"
          limits: 
            memory: "8Gi"
            cpu: "1500m"
        readinessProbe:
          tcpSocket:
            port: 27017
          initialDelaySeconds: 60
          timeoutSeconds: 10
          periodSeconds: 5
        livenessProbe:
          tcpSocket:
            port: 27017
          initialDelaySeconds: 60
          timeoutSeconds: 10
          periodSeconds: 5
        volumeMounts:
          - name: secrets-store-inline
            mountPath: "/mnt/secrets-store"
            readOnly: true
      volumes:
        - name: secrets-store-inline
          csi:
            driver: secrets-store.csi.k8s.io
            readOnly: true
            volumeAttributes:
              secretProviderClass: "mongo-db-secrets"
---
apiVersion: v1
kind: Service
metadata:
  name: mongo-db-svc
  namespace: database
spec:
  selector:
    app: mongo-db
  ports:
  - port: 27017
    targetPort: dbport
---
apiVersion: secrets-store.csi.x-k8s.io/v1
kind: SecretProviderClass
metadata:
  name: mongo-db-secrets
  namespace: database
spec:
  provider: aws
  parameters:
    objects: |
      - objectName: "mongo-db-secrets"  # AWS secret name
        objectType: "secretsmanager"
        jmesPath:
          - path: "dbuser"              # Extract "dbuser" from the secret
            objectAlias: "dbuser"       # Alias for the extracted value
          - path: "dbpass"              # Extract "dbpass" from the secret
            objectAlias: "dbpass"       # Alias for the extracted value
  secretObjects:
    - secretName: "mongo-db-secrets-csi"  # Kubernetes secret name
      type: Opaque
      data:
        - objectName: "dbuser"            # Maps to objectAlias in parameters
          key: "dbuser"                   # Key in the Kubernetes secret
        - objectName: "dbpass"            # Maps to objectAlias in parameters
          key: "dbpass"                   # Key in the Kubernetes secret
